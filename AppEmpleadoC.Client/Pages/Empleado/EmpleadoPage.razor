@page "/Empleado"
@using AppEmpleadosC.Entities
@inject NavigationManager navigationManager
@inject EmpleadoService EmpleadoService
<h3>Representantes de ventas</h3>
<div>
    <button @onclick="nuevo" class="btn btn-primary">Nuevo Empleado</button>
</div>
<div class="input-group">
    <input type="text" class="form-control" placeholder="Ingrese el nombre del Representante"
    @bind-value="nombre" @bind-value:event="oninput" aria-label="Recipient's username" aria-describedby="basic-addon2">
    <div class="input-group-append">
        <button @onclick="buscar" class="btn btn-outline-dark" type="button">Buscar</button>
        <button @onclick="limpiar" class="btn btn-outline-danger" type="button">Limpiar</button>
    </div>
</div>
@if(lista != null && lista.Count !=0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Numero_Empleado</th>
                <th>Nombre</th>
                <th>Cargo</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in lista)
            {
                <tr>
                    <td>@item.Num_Empl</td>
                    <td>@item.Nombre</td>
                    <td>@item.Cargo</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() => recuperarEmpleado(item.Num_Empl))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pen-fill" viewBox="0 0 16 16">
                                <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001" />
                            </svg>
                        </button>
                        <button class="btn btn-danger" @onclick="(() => eliminarEmpleado(item.Num_Empl))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0" />
                            </svg>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private void limpiar()
    {
        nombre = "";
        lista = EmpleadoService.filtrarEmpleados(nombre);
    }   

    public string nombre { get; set; } = string.Empty;
    private void buscar()
    {
        lista = EmpleadoService.filtrarEmpleados(nombre);
    }
    public List<ClienteListCLS> lista { get; set; } = new List<ClienteListCLS>();

    protected override Task OnInitializedAsync()
    {
        EmpleadoService.OnSearch += filtrar;
        listarEmpleados();
        return base.OnInitializedAsync();
    }
    private Task filtrar (string nombre)
    {
        lista = EmpleadoService.filtrarEmpleados(nombre);
        StateHasChanged();
        return Task.CompletedTask;
    }
    private void listarEmpleados()
    {
        lista = EmpleadoService.listarEmpleados();
    }
    private void nuevo()
    {
        navigationManager.NavigateTo("/formEmpleado");
    }
    private void recuperarEmpleado(int Num_Empl)
    {
        navigationManager.NavigateTo("/formEmpleado/edit/" + Num_Empl);
    }
    private void eliminarEmpleado(int Num_Empl)
    {
        EmpleadoService.eliminarEmpleado(Num_Empl);
        listarEmpleados();
    }
}
